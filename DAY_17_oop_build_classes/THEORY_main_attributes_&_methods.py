class User:

    def __init__(self, user_id, username):  # будет вызываться каждый раз при создании нового объекта
        self.id = user_id  # self.id - аттрибут id со ссылкой self на класс User,
        # user_id - обяз параметр, который передаётся в атрибут self.id при вызове метода init/класса User
        self.username = username  # окей называть одинаково параметр и атрибут
        self.followers = 0  # дефолтный атрибут (не обязательный),
        # который применяется при создании класса и его значение не надо определять при создании объекта класса,
        # т к оно по дефолту задано 0. Его не надо прописывать в параметрах в таком случае
        self.following = 0

    def follow(self, user):  # метод называется методом потому что у него всегда есть ссылка/параметр self на объект, который его вызвал, в отличие от обычной функции
        user.followers += 1  # ф-ция увеличивает счетчик подписчиков юзера, на кого подписались
        self.following += 1  # ф-ция увеличивает счетчик на кого, текущий юзер подписан

user_1 = User("001", "Ihar")  # при создании объекта указываем занчения обяз атрибутов
user_2 = User("002", "Alena")
print(user_1.id)
print(user_2.username)
print(user_1.followers)  # на выводе: 0; и для user_1, и для user_2, т к этот атрибут создается по дефолту
# pass  # чтобы pycharm не ругался, ставим это ключевое слово под функцией или классом, если нам надо пропустить строку кода

user_1.follow(user_2) # юзер1 подписался на юзера2
print(user_1.followers)  # 0
print(user_1.following)  # 1
print(user_2.followers)  # 1
print(user_2.following)  # 0
# user_1 = User()
# user_1.id = "001"  # создание атрибута класса ПОСЛЕ определения объекта класса
# user_1.username = "ihar"
#
# print(user_1.id)
